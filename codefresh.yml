# More examples of Codefresh YAML can be found at
# https://codefresh.io/docs/docs/yaml-examples/examples/

version: "1.0"

indicators:
  - assume_role:
      - &assume_role_account_number export AWS_ACCOUNT_NUMBER=$(aws sts get-caller-identity | jq '.Account' | sed -e 's/"//g')
      - &assume_role >-
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
        $(aws sts assume-role
        --role-arn arn:aws:iam::${AWS_ACCOUNT_NUMBER}:role/${CI_ROLE_NAME}
        --role-session-name $RANDOM$RANDOM
        --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]"
        --output text))

  - common_args: &common_args
      working_directory: "${{clone}}/${{WORKING_DIRECTORY}}"

stages:
  - "clone"
  - "build"
  - "deploy"
  - "invalidation"

steps:
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: "nobl9/slodlc"
    revision: "${{CF_BRANCH}}"
    git: "github"
    stage: "clone"

  install:
    title: "install node modules"
    type: "freestyle" # Run any command
    image: "node:current-alpine3.14"
    working_directory: "${{clone}}" # Running command where code cloned
    commands:
      - "yarn"
    stage: "build"

  generate:
    title: "Generate site files"
    type: "freestyle" # Run any command
    image: "node:current-alpine3.14"
    working_directory: "${{clone}}" # Running command where code cloned
    commands:
      - "yarn build"
    stage: "build"

  deploy:
    title: "Deploy to S3"
    type: "freestyle" # Run any command
    image: "amazon/aws-cli" # The image in which command will be executed
    working_directory: "${{clone}}" # Running command where code cloned
    commands:
      - yum install -y jq
      - *assume_role_account_number
      - *assume_role
      - aws sts get-caller-identity
      - "aws s3 cp --recursive ./build/ s3://$S3_BUCKET_NAME"
    stage: "deploy"
    scale:
      development_deployment:
        title: Development Deployment
        environment:
          - AWS_ACCESS_KEY_ID=${{AWS_ACCESS_KEY_ID}}
          - AWS_SECRET_ACCESS_KEY=${{AWS_SECRET_ACCESS_KEY}}
          - AWS_DEFAULT_REGION=${{AWS_DEFAULT_REGION}}
          - S3_BUCKET_NAME=${{S3_BUCKET_NAME}}
          - CI_ROLE_NAME=${{DEV_CI_ROLE_NAME}}
        when:
          branch:
            only:
              - main
      production_deployment:
        title: Production Deployment
        environment:
          - AWS_ACCESS_KEY_ID=${{PROD_AWS_ACCESS_KEY_ID}}
          - AWS_SECRET_ACCESS_KEY=${{PROD_AWS_SECRET_ACCESS_KEY}}
          - AWS_DEFAULT_REGION=${{PROD_AWS_DEFAULT_REGION}}
          - S3_BUCKET_NAME=${{PROD_S3_BUCKET_NAME}}
          - CI_ROLE_NAME=${{PROD_CI_ROLE_NAME}}
        when:
          branch:
            only:
              - production

  invalidate_cache:
    title: "Invalidate cloudfront cache"
    type: "freestyle" # Run any command
    image: "amazon/aws-cli" # The image in which command will be executed
    commands:
      - yum install -y jq
      - *assume_role_account_number
      - *assume_role
      - "aws cloudfront create-invalidation --distribution-id $CF_DISTRO_ID --paths '/*'"
    stage: "invalidation"
    scale:
      development_invalidation:
        title: Development Cloudfront Invalidation
        environment:
          - AWS_ACCESS_KEY_ID=${{AWS_ACCESS_KEY_ID}}
          - AWS_SECRET_ACCESS_KEY${{AWS_SECRET_ACCESS_KEY}}
          - AWS_DEFAULT_REGION=${{AWS_DEFAULT_REGION}}
          - CF_DISTRO_ID=${{CF_DISTRO_ID}}
          - CI_ROLE_NAME=${{DEV_CI_ROLE_NAME}}
        when:
          branch:
            only:
              - main
      production_invalidation:
        title: Production Cloudfront Invalidation
        environment:
          - AWS_ACCESS_KEY_ID=${{PROD_AWS_ACCESS_KEY_ID}}
          - AWS_SECRET_ACCESS_KEY=${{PROD_AWS_SECRET_ACCESS_KEY}}
          - AWS_DEFAULT_REGION=${{PROD_AWS_DEFAULT_REGION}}
          - CF_DISTRO_ID=${{PROD_CF_DISTRO_ID}}
          - CI_ROLE_NAME=${{PROD_CI_ROLE_NAME}}
        when:
          branch:
            only:
              - production
